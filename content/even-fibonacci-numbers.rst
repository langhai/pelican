Even Fibonacci Numbers
#####################################

:date: 31-01-2013
:tags: project euler, python, algorithm, math
:category: Code!
:slug: even-fibonacci-numbers
:author: Hai Lang
:status: published

.. highlights::
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
    By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
    find the sum of the even-valued terms.

Alright, jump right into the second question from `Project Euler`_. This one shouldn't be hard too,
just find even numbers in Fibonacci sequence whose values are less than 4e6, then sum to get the answer.

It doesn't really matter if I generate the Fibnacci sequence beforehand or pick only the even ones and 
add them on the fly, there'll only be 34 numbers in the list anyways.

Thanks to `Python Docs`_ for the Fibonacci sequence generation code, I got this with a little bit modification.

.. code-block:: python

    def genFib(x):
    result = []
    a, b = 0, 1
    while a < x:
        result.append(a)
        a, b = b, a+b
    return result

And then I can do this

.. code-block:: python

    print "The answer is: " + str(sum([x for x in genFib(4e6) if x % 2 == 0]))

Alternatively, I can do that in one shot,

.. code-block:: python

    result = 0
    a, b = 0, 1
    while a < 4e6:
    a, b = b, a+b
        if a % 2:
            continue
        result += a
    print "The answer is: " + str(result)

Anyway, the answer is **4613732**

*<< EOF*

.. _`Project Euler`: http://projecteuler.net/problem=2
.. _`Python Docs`: http://docs.python.org/2/tutorial/controlflow.html#defining-functions

