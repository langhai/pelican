Largest Product In A Series
#####################################

:date: 04-08-2013
:tags: project euler, python, algorithm, math
:category: Code!
:slug: lagest-product-in-a-series
:author: Hai Lang
:status: published

.. highlights::
    Find the greatest product of five consecutive digits in the 1000-digit number.

.. code-block:: python

    x = """73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    """
    x = x.replace('\n', '')

This is the 8th question from `Project Euler`_. Given a 1000-digit number, we need to 
get the maximum product of 5 consecutive digits.

By five consecutive digits, it means the *(7, 3, 1, 6, 7), (3, 1, 6, 7, 1), ...*. The
game plan is to write a simple loop, walk through this 1000-digit number and see which
5 yeilds the greatest product.

Note that the last group of 5 consecutive digits is *(6, 3, 4, 5, 0)* which starts at
the index *len(x) - 4*

.. code-block:: python

    x = """73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    """
    x = x.replace('\n', '')
    
    if __name__ == '__main__':
        max_product = -1
        for i in range(len(x) - 4):
            product = int(x[i]) * int(x[i+1]) * int(x[i+2]) * \
                    int(x[i+3]) * int(x[i+4])
            if product > max_product:
                max_product = product
        print max_product

Very straight-forward code. Taken from `pastebin`_ and modified a little bit.
Of course there are simpler and more pythonic ways, but since
this is a simple question, I'll just be lazy and ignore the possible ugliness of 
this code.

The answer is **40824**, if you print out the five digits, they are,
**(9, 9, 8, 7, 9)**, starting at index **364**.

*<<EOF*


.. _`Project Euler`: http://projecteuler.net/problem=8
.. _`pastebin`: http://pastebin.com/EChYbEic
